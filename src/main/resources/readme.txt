Фабричный метод (шаблон проектирования)
=========================================================================================================
Factory Method,также известен как Виртуальный конструктор (англ. Virtual Constructor).

 Порождающий шаблон проектирования, предоставляющий подклассам (дочерним классам) интерфейс 
для создания экземпляров некоторого класса. В момент создания наследники могут определить, 
какой класс создавать. 

 Иными словами, данный шаблон делегирует создание объектов наследникам 
родительского класса. Это позволяет использовать в коде программы не специфические классы, 
а манипулировать абстрактными объектами на более высоком уровне.


Структура
=========================================================================================================
 +---------+                        +------------------+  
 | PRODUCT |                        | CREATOR          | 
 +---------+                        | + FactoryMethod()|-------------------- Product* P = FactoryMethod();
	/|\                             | + NewProduct()   |
     |                              +------------------+
     |                                       /|\
     |                                        | 
	 |										  |	 
     |                                        |
 +------------------+               +-----------------------------+
 | CONCRETE PRODUCT |<--------------| CONCRETE CREATOR            |---------- return new ConcreteProduct
 +------------------+               | + FactoryMethod() : Product |
                                    +-----------------------------+
 
 
Product — продукт;
Определяет интерфейс объектов создаваемых абстрактным методом;

ConcreteProduct — конкретный продукт;
Реализует интерфейс Product;

Creator — создатель;
Объявляет фабричный метод, который возвращает объект типа Product. Может также содержать реализацию этого 
метода «по умолчанию». Может вызывать фабричный метод для создания объекта типа Product;

ConcreteCreator — конкретный создатель;
Переопределяет фабричный метод таким образом, чтобы он создавал и возвращал объект класса ConcreteProduct.


Достоинства
=========================================================================================================
1. Позволяет сделать код создания объектов более универсальным, не привязываясь к конкретным классам 
(ConcreteProduct), а оперируя лишь общим интерфейсом (Product);
2. Позволяет установить связь между параллельными иерархиями классов.

Недостатки
=========================================================================================================
Необходимость создавать наследника Creator для каждого нового типа продукта (ConcreteProduct).


---------------------------------------------------------------------------------------------------------
Description created by Dmitry Belenov,  Saint Petersburg, 2019